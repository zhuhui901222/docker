user root;
worker_processes 4;
pid /run/nginx.pid;
# daemon off;
events {
    worker_connections 2048;
    multi_accept on;
    use epoll;
}
http {
    server_tokens off;
    sendfile off;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 15;
    types_hash_max_size 2048;
    client_max_body_size 20M;
    include /etc/nginx/mime.types;
    include /etc/nginx/conf.d/*.conf;
    default_type application/octet-stream;
    gzip on;
    gzip_disable "msie6";
#open_file_cache max=100;
# lua_need_request_body on;
# content_by_lua 'local s = ngx.var.request_body';
    log_format main escape=json '$remote_addr||$remote_user||$time_local||$request||$http_host||$status||$request_length||$body_bytes_sent||$http_referer||$http_user_agent||$request_time||$upstream_response_time||$request_body';
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log;
}
# proxy: to redis
# stream{
#     upstream backend{
#         hash $remote_addr consistent;
#          #设置后端Redis连接串和端口，失败超时时间为10s，最多尝试3次。
#         server redis:6379 max_fails=3 fail_timeout=10s;
#     }
#     server{
#         # nginx访问端口
#         listen 3333;
#         #指定nginx连接后端服务器的超时时间，指定为20s。
#         proxy_connect_timeout 20s;
#          #距离上一次成功访问（连接或读写）后端服务器的时间超过了5分钟就判定为超时，断开此连接。
#         proxy_timeout 5m;
#          #将TCP连接及数据收发转向叫“backend”的后端服务器。
#         proxy_pass backend;
#     }
# }
# 负载均衡
# upstream tomcat {
#     server tomcat1:8080;
#     server tomcat2:8080;
#     server tomcat3:8080;
# }
# server {
#     listen 80;
#     server_name localhost;
#     index index.html index.htm index.php;
#     access_log /var/log/nginx/access.log;
#     location / {
#         proxy_pass http://tomcat;
#     }
# }
